-- MySQL Script generated by MySQL Workbench
-- Tue Mar 28 19:56:35 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema club_membership
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema club_membership
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `club_membership` DEFAULT CHARACTER SET utf8 ;
USE `club_membership` ;

-- -----------------------------------------------------
-- Table `club_membership`.`member`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `club_membership`.`member` (
  `member_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `member_name` VARCHAR(45) NOT NULL,
  `member_phone` VARCHAR(45) NOT NULL,
  `member_email` VARCHAR(45) NOT NULL,
  `member_password` VARCHAR(100) NOT NULL,
  PRIMARY KEY (`member_id`),
  UNIQUE INDEX `idmember_UNIQUE` (`member_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `club_membership`.`staff`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `club_membership`.`staff` (
  `staff_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `member_member_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`staff_id`),
  INDEX `fk_staff_member_idx` (`member_member_id` ASC),
  UNIQUE INDEX `staff_id_UNIQUE` (`staff_id` ASC),
  CONSTRAINT `fk_staff_member`
    FOREIGN KEY (`member_member_id`)
    REFERENCES `club_membership`.`member` (`member_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `club_membership`.`group_leader`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `club_membership`.`group_leader` (
  `group_leader_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `member_member_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`group_leader_id`),
  UNIQUE INDEX `group_leader_id_UNIQUE` (`group_leader_id` ASC),
  INDEX `fk_group_leader_member1_idx` (`member_member_id` ASC),
  CONSTRAINT `fk_group_leader_member1`
    FOREIGN KEY (`member_member_id`)
    REFERENCES `club_membership`.`member` (`member_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `club_membership`.`tech_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `club_membership`.`tech_group` (
  `tech_group_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `group_name` VARCHAR(45) NOT NULL,
  `staff_staff_id` INT UNSIGNED NOT NULL,
  `group_leader_group_leader_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`tech_group_id`),
  UNIQUE INDEX `group_id_UNIQUE` (`tech_group_id` ASC),
  INDEX `fk_tech_group_staff1_idx` (`staff_staff_id` ASC),
  INDEX `fk_tech_group_group_leader1_idx` (`group_leader_group_leader_id` ASC),
  CONSTRAINT `fk_tech_group_staff1`
    FOREIGN KEY (`staff_staff_id`)
    REFERENCES `club_membership`.`staff` (`staff_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tech_group_group_leader1`
    FOREIGN KEY (`group_leader_group_leader_id`)
    REFERENCES `club_membership`.`group_leader` (`group_leader_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `club_membership`.`event_type`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `club_membership`.`event_type` (
  `event_type_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `event_type_name` VARCHAR(45) NULL,
  PRIMARY KEY (`event_type_id`),
  UNIQUE INDEX `event_id_UNIQUE` (`event_type_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `club_membership`.`event`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `club_membership`.`event` (
  `event_id` INT UNSIGNED NOT NULL AUTO_INCREMENT,
  `event_name` VARCHAR(45) NULL,
  `event_time` DATETIME NULL,
  `event_type_event_type_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`event_id`),
  UNIQUE INDEX `event_id_UNIQUE` (`event_id` ASC),
  INDEX `fk_event_event_type1_idx` (`event_type_event_type_id` ASC),
  CONSTRAINT `fk_event_event_type1`
    FOREIGN KEY (`event_type_event_type_id`)
    REFERENCES `club_membership`.`event_type` (`event_type_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `club_membership`.`member_has_tech_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `club_membership`.`member_has_tech_group` (
  `member_member_id` INT UNSIGNED NOT NULL,
  `tech_group_tech_group_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`tech_group_tech_group_id`, `member_member_id`),
  INDEX `fk_member_has_tech_group_tech_group1_idx` (`tech_group_tech_group_id` ASC),
  INDEX `fk_member_has_tech_group_member1_idx` (`member_member_id` ASC),
  CONSTRAINT `fk_member_has_tech_group_member1`
    FOREIGN KEY (`member_member_id`)
    REFERENCES `club_membership`.`member` (`member_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_member_has_tech_group_tech_group1`
    FOREIGN KEY (`tech_group_tech_group_id`)
    REFERENCES `club_membership`.`tech_group` (`tech_group_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `club_membership`.`tech_group_has_event`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `club_membership`.`tech_group_has_event` (
  `tech_group_tech_group_id` INT UNSIGNED NOT NULL,
  `event_event_id` INT UNSIGNED NOT NULL,
  PRIMARY KEY (`tech_group_tech_group_id`, `event_event_id`),
  INDEX `fk_tech_group_has_event_event1_idx` (`event_event_id` ASC),
  INDEX `fk_tech_group_has_event_tech_group1_idx` (`tech_group_tech_group_id` ASC),
  CONSTRAINT `fk_tech_group_has_event_tech_group1`
    FOREIGN KEY (`tech_group_tech_group_id`)
    REFERENCES `club_membership`.`tech_group` (`tech_group_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_tech_group_has_event_event1`
    FOREIGN KEY (`event_event_id`)
    REFERENCES `club_membership`.`event` (`event_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `club_membership`.`table1`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `club_membership`.`table1` (
)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `club_membership`.`member`
-- -----------------------------------------------------
START TRANSACTION;
USE `club_membership`;
INSERT INTO `club_membership`.`member` (`member_id`, `member_name`, `member_phone`, `member_email`, `member_password`) VALUES (1, 'Bing', '123456', 'liubingfeng93@gmail.com', 'fake');
INSERT INTO `club_membership`.`member` (`member_id`, `member_name`, `member_phone`, `member_email`, `member_password`) VALUES (2, 'Regina', '654321', 'rjj@abc.com', 'fake2');

COMMIT;


-- -----------------------------------------------------
-- Data for table `club_membership`.`staff`
-- -----------------------------------------------------
START TRANSACTION;
USE `club_membership`;
INSERT INTO `club_membership`.`staff` (`staff_id`, `member_member_id`) VALUES (1, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `club_membership`.`group_leader`
-- -----------------------------------------------------
START TRANSACTION;
USE `club_membership`;
INSERT INTO `club_membership`.`group_leader` (`group_leader_id`, `member_member_id`) VALUES (1, 1);
INSERT INTO `club_membership`.`group_leader` (`group_leader_id`, `member_member_id`) VALUES (2, 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `club_membership`.`tech_group`
-- -----------------------------------------------------
START TRANSACTION;
USE `club_membership`;
INSERT INTO `club_membership`.`tech_group` (`tech_group_id`, `group_name`, `staff_staff_id`, `group_leader_group_leader_id`) VALUES (1, 'LearnJava', 1, 1);
INSERT INTO `club_membership`.`tech_group` (`tech_group_id`, `group_name`, `staff_staff_id`, `group_leader_group_leader_id`) VALUES (2, 'LearnPython', 1, 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `club_membership`.`event_type`
-- -----------------------------------------------------
START TRANSACTION;
USE `club_membership`;
INSERT INTO `club_membership`.`event_type` (`event_type_id`, `event_type_name`) VALUES (1, 'Training');

COMMIT;


-- -----------------------------------------------------
-- Data for table `club_membership`.`event`
-- -----------------------------------------------------
START TRANSACTION;
USE `club_membership`;
INSERT INTO `club_membership`.`event` (`event_id`, `event_name`, `event_time`, `event_type_event_type_id`) VALUES (1, 'FirstJavaTraningSession', '2014-12-01 00:00:00', 1);
INSERT INTO `club_membership`.`event` (`event_id`, `event_name`, `event_time`, `event_type_event_type_id`) VALUES (2, 'FirstPythonTraningSession', '2017-03-28 13:00:00', 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `club_membership`.`member_has_tech_group`
-- -----------------------------------------------------
START TRANSACTION;
USE `club_membership`;
INSERT INTO `club_membership`.`member_has_tech_group` (`member_member_id`, `tech_group_tech_group_id`) VALUES (1, 1);
INSERT INTO `club_membership`.`member_has_tech_group` (`member_member_id`, `tech_group_tech_group_id`) VALUES (2, 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `club_membership`.`tech_group_has_event`
-- -----------------------------------------------------
START TRANSACTION;
USE `club_membership`;
INSERT INTO `club_membership`.`tech_group_has_event` (`tech_group_tech_group_id`, `event_event_id`) VALUES (1, 1);
INSERT INTO `club_membership`.`tech_group_has_event` (`tech_group_tech_group_id`, `event_event_id`) VALUES (2, 2);

COMMIT;

